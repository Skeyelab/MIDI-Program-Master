{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/io-list/io-list.component.html","webpack:///./src/app/components/io-list/io-list.component.scss","webpack:///./src/app/components/io-list/io-list.component.ts","webpack:///./src/app/components/nav/nav.component.html","webpack:///./src/app/components/nav/nav.component.scss","webpack:///./src/app/components/nav/nav.component.ts","webpack:///./src/app/components/settings-live/settings-live.component.html","webpack:///./src/app/components/settings-live/settings-live.component.scss","webpack:///./src/app/components/settings-live/settings-live.component.ts","webpack:///./src/app/components/settings-stored/setting-stored.component.html","webpack:///./src/app/components/settings-stored/setting-stored.component.scss","webpack:///./src/app/components/settings-stored/setting-stored.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"<app-nav></app-nav>\\n<div class=\\\"container\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-12\\\">\\n      <p>What is this? This is a browser based MIDI Program Change 'scratch pad' for your whole studio.\\n        It will display program change data for all available MIDI inputs in real time, allow you store a snapshot, then\\n        restore it.\\n        When restore the snapshot, it will be sent to all available MIDI outputs.</p>\\n      <p>\\n        It uses <a href=\\\"http://djipco.github.io/webmidi/latest/classes/WebMidi.html\\\" target=\\\"_blank\\\">WebMidi.js</a> and\\n        is running 100% in your browser. You can read the code on <a\\n        href=\\\"https://github.com/Skeyelab/MIDI-Program-Master\\\" target=\\\"_blank\\\">GitHub</a> if you like.\\n      </p>\\n    </div>\\n  </div>\\n  <app-io-list (webMidiActive)=\\\"webMidiActive($event)\\\"></app-io-list>\\n  <app-settings-live [ioConfig]=\\\"ioConfig\\\" [settings]=\\\"restoredSettings\\\" (settingsStored)=\\\"storedSettings = $event\\\"></app-settings-live>\\n  <app-settings-stored [ioConfig]=\\\"ioConfig\\\" [settings]=\\\"storedSettings\\\" (settingsRestored)=\\\"restoredSettings = $event\\\"></app-settings-stored>\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-12\\\">\\n      <button class=\\\"btn btn-secondary\\\" (click)=\\\"importJson()\\\">Import JSON file</button>\\n      <input #fileInput accept=\\\"application/json\\\" type=\\\"file\\\" name=\\\"settings\\\" hidden (change)=\\\"fileChosen($event)\\\"/>\\n    </div>\\n  </div>\\n\\n</div>\\n<footer class=\\\"container-fluid\\\">\\n  <p>\\n    Please report bugs here: <a href=\\\"https://github.com/Skeyelab/MIDI-Program-Master/issues\\\" target=\\\"_blank\\\">https://github.com/Skeyelab/MIDI-Program-Master/issues</a>\\n  </p>\\n  <p>\\n    version 2.0\\n  </p>\\n</footer>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuc2NzcyJ9 */\"","import {Component, ElementRef, Input, ViewChild} from '@angular/core';\nimport {ChannelSetting} from \"../models/channel-setting\";\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  ioConfig: any;\n  storedSettings: Array<ChannelSetting>;\n  restoredSettings: Array<ChannelSetting>;\n  @ViewChild('fileInput') fileInput: ElementRef;\n\n  webMidiActive($event) {\n    this.ioConfig = $event;\n  }\n\n\n  importJson() {\n    this.fileInput.nativeElement.click();\n  }\n\n  fileChosen() {\n    if(this.fileInput.nativeElement.files && this.fileInput.nativeElement.files.length > 0) {\n      const file = this.fileInput.nativeElement.files[0];\n      const reader = new FileReader();\n      reader.readAsText(file, 'UTF-8');\n      reader.onload = event => {\n        this.storedSettings = JSON.parse(event.target['result']);\n      }\n    }\n  }\n}\n","import {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\n\nimport {AppComponent} from './app.component';\nimport {IoListComponent} from \"./components/io-list/io-list.component\";\nimport {NavComponent} from \"./components/nav/nav.component\";\nimport {SettingStoredComponent} from './components/settings-stored/setting-stored.component';\nimport { SettingsLiveComponent } from './components/settings-live/settings-live.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    IoListComponent,\n    NavComponent,\n    SettingStoredComponent,\n    SettingsLiveComponent,\n  ],\n  imports: [\n    BrowserModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n","module.exports = \"<div class=\\\"row\\\" *ngIf=\\\"enabled\\\">\\n  <div class=\\\"col-12\\\">\\n    <h2>IO</h2>\\n  </div>\\n  <div class=\\\"col-12 col-md-6\\\">\\n    <table class=\\\"table table-striped\\\">\\n      <thead>\\n      <tr>\\n        <th>Inputs</th>\\n      </tr>\\n      </thead>\\n      <tbody>\\n      <tr *ngFor=\\\"let input of inputs\\\">\\n        <td>{{input.name}}</td>\\n      </tr>\\n      </tbody>\\n    </table>\\n  </div>\\n  <div class=\\\"col-12 col-md-6\\\">\\n    <table class=\\\"table table-striped\\\">\\n      <thead>\\n      <tr>\\n        <th>Outputs</th>\\n      </tr>\\n      </thead>\\n      <tbody>\\n        <tr *ngFor=\\\"let output of outputs\\\">\\n          <td>{{output.name}}</td>\\n        </tr>\\n      </tbody>\\n    </table>\\n  </div>\\n</div>\\n<div class=\\\"row\\\" *ngIf=\\\"!enabled && error\\\">\\n  <div class=\\\"col-12 col-md-6\\\">\\n    <div class=\\\"alert-danger\\\">\\n      <p>{{error}}</p>\\n    </div>\\n  </div>\\n</div>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvaW8tbGlzdC9pby1saXN0LmNvbXBvbmVudC5zY3NzIn0= */\"","import {Component, EventEmitter, OnInit, Output} from '@angular/core';\nimport * as WebMidi from 'webmidi';\n\n@Component({\n  selector: 'app-io-list',\n  templateUrl: './io-list.component.html',\n  styleUrls: ['./io-list.component.scss']\n})\nexport class IoListComponent implements OnInit {\n  inputs = [];\n  outputs = [];\n  error: string;\n  enabled: boolean;\n  @Output() webMidiActive: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor() {\n  }\n\n  ngOnInit() {\n    this.enable();\n  }\n\n  enable() {\n    WebMidi.enable(err => {\n      err ? this.showError(err) : this.success();\n    },)\n  }\n\n  success() {\n    this.enabled = true;\n    this.inputs = WebMidi.inputs;\n    this.outputs = WebMidi.outputs;\n    this.webMidiActive.emit({\n      inputs: this.inputs,\n      outputs: this.outputs,\n    });\n  }\n\n  showError(err) {\n    this.enabled = false;\n    this.error = err;\n  }\n\n}\n","module.exports = \"<nav class=\\\"navbar navbar-light bg-light fixed-top\\\">\\n  <a class=\\\"navbar-brand\\\" href=\\\"/\\\">\\n    <div class=\\\"row align-items-center\\\">\\n      <div class=\\\"col-4\\\">\\n        <img src=\\\"assets/images/apple-touch-icon.png\\\"/>\\n      </div>\\n      <div class=\\\"col-8\\\">\\n        <h2>{{title}}</h2>\\n      </div>\\n    </div>\\n  </a>\\n</nav>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbmF2L25hdi5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-nav',\n  templateUrl: './nav.component.html',\n  styleUrls: ['./nav.component.scss']\n})\nexport class NavComponent implements OnInit {\n  title = 'Midi Program Master';\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"<div class=\\\"row mb-3\\\" *ngIf=\\\"settings\\\">\\n  <div class=\\\"col-12\\\">\\n    <h2>Live settings</h2>\\n    <table class=\\\"table table-striped\\\">\\n      <thead>\\n      <tr><th scope=\\\"col\\\"></th>\\n        <ng-container *ngFor=\\\"let setting of settings\\\">\\n          <th scope=\\\"col\\\" class=\\\"text-center font-weight-bold\\\" [ngClass]=\\\"{'bg-success text-white': setting.active}\\\">\\n            {{setting.channel}}\\n          </th>\\n        </ng-container>\\n      </tr>\\n      </thead>\\n      <tbody>\\n      <tr>\\n        <th scope=\\\"row\\\" class=\\\"text-center font-weight-bold\\\">PC</th>\\n        <td class=\\\"text-center\\\" *ngFor=\\\"let setting of settings\\\" [ngClass]=\\\"{'bg-success text-white': setting.active}\\\">\\n          {{setting.programChange}}\\n        </td>\\n      </tr>\\n      <tr>\\n        <th scope=\\\"row\\\" class=\\\"text-center font-weight-bold\\\">MSB</th>\\n        <td class=\\\"text-center\\\" *ngFor=\\\"let setting of settings\\\" [ngClass]=\\\"{'bg-success text-white': setting.active}\\\">\\n          {{setting.bankSelectCoarse}}\\n        </td>\\n      </tr>\\n      <tr>\\n        <th scope=\\\"row\\\" class=\\\"text-center font-weight-bold\\\">LSB</th>\\n        <td class=\\\"text-center\\\" *ngFor=\\\"let setting of settings\\\" [ngClass]=\\\"{'bg-success text-white': setting.active}\\\">\\n          {{setting.bankSelectFine}}\\n        </td>\\n      </tr>\\n      <tr>\\n        <th scope=\\\"row\\\" class=\\\"text-center font-weight-bold\\\">CC</th>\\n        <td class=\\\"text-center\\\" *ngFor=\\\"let setting of settings\\\" [ngClass]=\\\"{'bg-success text-white': setting.active}\\\">\\n          {{setting.ccs.length}}\\n        </td>\\n      </tr>\\n      </tbody>\\n    </table>\\n    <button class=\\\"btn btn-primary\\\" (click)=\\\"storeSettings()\\\">Store Settings</button>\\n  </div>\\n</div>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvc2V0dGluZ3MtbGl2ZS9zZXR0aW5ncy1saXZlLmNvbXBvbmVudC5zY3NzIn0= */\"","import {\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChange,\n  SimpleChanges\n} from '@angular/core';\nimport {ChannelSetting} from \"../../../models/channel-setting\";\n\n@Component({\n  selector: 'app-settings-live',\n  templateUrl: './settings-live.component.html',\n  styleUrls: ['./settings-live.component.scss']\n})\nexport class SettingsLiveComponent implements OnChanges {\n  @Input() settings: Array<ChannelSetting> = [];\n  amountOfChannels = 16;\n  @Input() ioConfig: any;\n  @Output() settingsStored: EventEmitter<Array<ChannelSetting>> = new EventEmitter<Array<ChannelSetting>>();\n\n  constructor(private cd: ChangeDetectorRef) {\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('ioConfig')) {\n      this.generateChannels();\n    }\n  }\n\n  generateChannels() {\n    this.settings = [];\n    Array.from(Array(this.amountOfChannels).keys()).forEach(index => {\n      this.settings.push({\n        channel: index + 1,\n        ccs: [],\n        active: false,\n      });\n    });\n    this.enableInputListeners();\n  }\n\n  enableInputListeners() {\n    if (this.ioConfig) {\n      this.ioConfig.inputs.forEach(input => {\n        input.addListener('controlchange', 'all', function (e) {\n          const setting = this.settings.find(setting => setting.channel === e.channel);\n          setting.active = true;\n          switch (e.controller.name) {\n            case 'bankselectcoarse':\n              if (setting) {\n                setting.bankSelectCoarse = e.value;\n              }\n              break;\n            case 'bankselectfine':\n              if (setting) {\n                setting.bankSelectFine = e.value;\n              }\n              break;\n            default:\n              const cc = setting.ccs.find(cc => cc.number === e.controller.number);\n              if (cc) {\n                cc.value = e.value\n              } else {\n                setting.ccs.push({\n                  number: e.controller.number,\n                  value: e.value\n                });\n              }\n          }\n          this.cd.detectChanges();\n          //Force change detection inside event listener otherwise changes are not reflected in the view\n        }.bind(this));\n\n        input.addListener('programchange', 'all', function (e) {\n          const setting = this.settings.find(setting => setting.channel === e.channel);\n          if (setting) {\n            setting.programChange = e.value;\n            setting.ccs = [];\n            setting.active = true;\n          }\n          this.cd.detectChanges();\n          //Force change detection inside event listener otherwise changes are not reflected in the view\n        }.bind(this));\n      });\n    }\n  }\n\n\n  storeSettings() {\n    this.settingsStored.emit(JSON.parse(JSON.stringify(this.settings)));\n  }\n}\n","module.exports = \"<div class=\\\"row mb-3\\\" *ngIf=\\\"settings && settings.length > 0\\\">\\n  <div class=\\\"col-12\\\">\\n    <h2>Stored settings</h2>\\n    <table class=\\\"table table-striped\\\">\\n      <thead>\\n      <tr><th scope=\\\"col\\\"></th>\\n        <ng-container *ngFor=\\\"let setting of settings\\\">\\n          <th scope=\\\"col\\\" class=\\\"text-center font-weight-bold\\\" [ngClass]=\\\"{'bg-success text-white': setting.active}\\\">\\n            {{setting.channel}}\\n          </th>\\n        </ng-container>\\n      </tr>\\n      </thead>\\n      <tbody>\\n      <tr>\\n        <th scope=\\\"row\\\" class=\\\"text-center font-weight-bold\\\">PC</th>\\n        <td class=\\\"text-center\\\" *ngFor=\\\"let setting of settings\\\" [ngClass]=\\\"{'bg-success text-white': setting.active}\\\">\\n          {{setting.programChange}}\\n        </td>\\n      </tr>\\n      <tr>\\n        <th scope=\\\"row\\\" class=\\\"text-center font-weight-bold\\\">MSB</th>\\n        <td class=\\\"text-center\\\" *ngFor=\\\"let setting of settings\\\" [ngClass]=\\\"{'bg-success text-white': setting.active}\\\">\\n          {{setting.bankSelectCoarse}}\\n        </td>\\n      </tr>\\n      <tr>\\n        <th scope=\\\"row\\\" class=\\\"text-center font-weight-bold\\\">LSB</th>\\n        <td class=\\\"text-center\\\" *ngFor=\\\"let setting of settings\\\" [ngClass]=\\\"{'bg-success text-white': setting.active}\\\">\\n          {{setting.bankSelectFine}}\\n        </td>\\n      </tr>\\n      <tr>\\n        <th scope=\\\"row\\\" class=\\\"text-center font-weight-bold\\\">CC</th>\\n        <td class=\\\"text-center\\\" *ngFor=\\\"let setting of settings\\\" [ngClass]=\\\"{'bg-success text-white': setting.active}\\\">\\n          {{setting.ccs.length}}\\n        </td>\\n      </tr>\\n      </tbody>\\n    </table>\\n    <button class=\\\"btn btn-primary mr-2\\\" (click)=\\\"restoreSettings()\\\">Restore Settings</button>\\n    <button class=\\\"btn btn-secondary mr-2\\\" (click)=\\\"downloadJson()\\\">Export JSON file</button>\\n    <button class=\\\"btn btn-danger\\\" (click)=\\\"reset()\\\">Clear</button>\\n  </div>\\n</div>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvc2V0dGluZ3Mtc3RvcmVkL3NldHRpbmctc3RvcmVkLmNvbXBvbmVudC5zY3NzIn0= */\"","import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {ChannelSetting} from \"../../../models/channel-setting\";\nimport * as FileSaver from \"file-saver\";\n\n@Component({\n  selector: 'app-settings-stored',\n  templateUrl: './setting-stored.component.html',\n  styleUrls: ['./setting-stored.component.scss'],\n})\nexport class SettingStoredComponent {\n  @Input() settings: Array<ChannelSetting> = [];\n  @Input() ioConfig: any;\n  @Output() settingsRestored: EventEmitter<Array<ChannelSetting>> = new EventEmitter<Array<ChannelSetting>>();\n\n  constructor() {\n  }\n\n  restoreSettings() {\n    this.ioConfig.outputs.forEach(output => {\n      this.settings.forEach(setting => {\n        if (setting.bankSelectCoarse) {\n          output.sendControlChange(0, setting.bankSelectCoarse, setting.channel);\n        }\n        if (setting.bankSelectFine) {\n          output.sendControlChange(32, setting.bankSelectFine, setting.bankSelectFine);\n        }\n        if (setting.programChange) {\n          output.sendProgramChange(setting.programChange, setting.channel);\n        }\n        setting.ccs.forEach(cc => {\n          output.sendControlChange(cc.number, cc.value, setting.channel);\n        });\n      });\n      this.settingsRestored.emit(this.settings);\n    });\n  }\n\n  downloadJson() {\n    const blob = new Blob([JSON.stringify(this.settings)], {type: 'application/json;charset=utf-8'});\n    FileSaver.saveAs(blob, 'settings.json');\n  }\n\n  reset() {\n    this.settings = [];\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}